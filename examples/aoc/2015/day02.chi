package aoc2015/day02

import std/io { readLines }
import std/math as math


data Dimensions = Dimensions(l: int, w: int, h: int)

fn readSingleSpec(spec: string): Dimensions {
    val tmp = spec.split("x", 0-1)
    Dimensions(tmp[0] as int, tmp[1] as int, tmp[2] as int)
}

fn min(a: int, b: int, c: int): int {
    math.min(math.min(a, b), c)
}

fn calcSurfaceAreaWithSlack(dim: Dimensions): int {
    val sideA: int = dim.l * dim.w
    val sideB: int = dim.w * dim.h
    val sideC: int = dim.h * dim.l
    val slack: int = min(sideA, sideB, sideC)
    2 * sideA + 2 * sideB + 2 * sideC + slack
}

fn getInput(file: string): array[Dimensions] {
    val contents = readLines(file)
    contents.map[string, Dimensions](readSingleSpec)
}

fn sum(arr: array[int]): int {
    arr.fold[int, int](0, { acc: int, element: int -> acc + element })
}

val inputFileName = "examples/aoc/2015/day02_input.txt"
val fileContents = readLines(inputFileName)

val input = fileContents.map(readSingleSpec)
val areas = input.map(calcSurfaceAreaWithSlack)

val total = sum(areas)
println("Total material needed: " + total as string)


// Part 2 - ribbon

fn bubbleSortInPlace(a: array[int]) {
    val asize = a.size()
    var step = 0
    while(step < asize - 1) {
        var i = 0
        while(i < asize - step - 1) {
            if (a[i] > a[i+1]) {
                val tmp = a[i]
                a[i] = (a[i+1])
                a[i+1] = tmp
            }
            i = i + 1
        }
        step = step + 1
    }
}

fn smallestSidePerimiter(dim: Dimensions): int {
    val dimensionArray = arrayOf(dim.l, dim.w, dim.h)
    bubbleSortInPlace(dimensionArray)
    2 * dimensionArray[0] + 2 * dimensionArray[1]
}

fn volume(dim: Dimensions): int {
    dim.l * dim.w * dim.h
}

fn ribbonNeeded(dim: Dimensions): int {
    volume(dim) + smallestSidePerimiter(dim)
}

val ribbons = input.map(ribbonNeeded)
val totalRibbon = sum(ribbons)

println("Total ribbon needed: " + totalRibbon as string)
